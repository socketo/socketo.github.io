<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CTF on socketo.github.io</title>
    <link>https://socketo.github.io/tags/ctf/</link>
    <description>Recent content in CTF on socketo.github.io</description>
    <generator>Hugo -- 0.147.0</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 21 Feb 2019 20:33:47 +0000</lastBuildDate>
    <atom:link href="https://socketo.github.io/tags/ctf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BLE CTF WriteUp</title>
      <link>https://socketo.github.io/posts/2019/02/21/</link>
      <pubDate>Thu, 21 Feb 2019 20:33:47 +0000</pubDate>
      <guid>https://socketo.github.io/posts/2019/02/21/</guid>
      <description>&lt;p&gt;※ 移行前の元ブログ記事 : &lt;a href=&#34;https://socketo.hatenablog.jp/entry/2019/02/21/203347&#34;&gt;BLE CTF WriteUp - #include &amp;lt;sys_socket.h&amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;
&lt;p&gt;昨年2018年のDEF CON 26 WIRELESS VILLAGEで発表された&lt;a href=&#34;https://twitter.com/hackgnar&#34;&gt;@hackgnar&lt;/a&gt;氏のBLE CTFをやってみるという話。&lt;/p&gt;
&lt;p&gt;hackgnar - Learning Bluetooth Hackery with BLE CTF&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.hackgnar.com/2018/06/learning-bluetooth-hackery-with-ble-ctf.html&#34;&gt;http://www.hackgnar.com/2018/06/learning-bluetooth-hackery-with-ble-ctf.html&lt;/a&gt;&lt;/p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/lx5MAOyu9N0?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;p&gt;ble_ctf_ A Bluetooth low energy capture the flag :  &lt;a href=&#34;https://github.com/hackgnar/ble_ctf&#34;&gt;https://github.com/hackgnar/ble_ctf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;READMEに書かれているように、このCTFを実施するには、手元のコンピュータだけでなくESP32-DevkitとBluetoothドングルが必要になる。&lt;/p&gt;
&lt;p&gt;私の今回の環境は以下&lt;/p&gt;
&lt;p&gt;ESP32-DevkitC V4
エレコムのよく分からんBluetooth USBアダプタ&lt;/p&gt;
&lt;p&gt;ESP32ビルド環境
macOS Mojave version 10.14.3&lt;/p&gt;
&lt;p&gt;端末(ThinkPad X220)
Kali Linux&lt;/p&gt;</description>
    </item>
    <item>
      <title>SECCON 2018 Online CTF Forensics問題 Write-up</title>
      <link>https://socketo.github.io/posts/2018/10/28/</link>
      <pubDate>Sun, 28 Oct 2018 15:41:22 +0000</pubDate>
      <guid>https://socketo.github.io/posts/2018/10/28/</guid>
      <description>&lt;p&gt;※ 移行前の元ブログ記事 : &lt;a href=&#34;https://socketo.hatenablog.jp/entry/2018/10/28/154122&#34;&gt;SECCON 2018 Online CTF Forensics問題 Write-up - #include &amp;lt;sys_socket.h&amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;SECCON2018のオンライン大会のForensics問題のWrite-up&lt;/p&gt;
&lt;p&gt;フォレンジック問題はやるかと腰を上げてやるだけやった&lt;/p&gt;
&lt;p&gt;UnzipとHistory&lt;/p&gt;
&lt;h3 id=&#34;unzip&#34;&gt;Unzip&lt;/h3&gt;
&lt;h4 id=&#34;問題文&#34;&gt;問題文&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ Unzip flag.zip.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;write-up&#34;&gt;Write-up&lt;/h4&gt;
&lt;p&gt;ファイル名:&lt;code&gt;unzip.zip_26c0cb5b40e9f78641ae44229cda45529418183f&lt;/code&gt;のZIPファイルが落ちてくる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ file unzip.zip_26c0cb5b40e9f78641ae44229cda45529418183f
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;unzip.zip_26c0cb5b40e9f78641ae44229cda45529418183f: Zip archive data, at least v1.0 to extract
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;普通にzipファイルなのでunzipする&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ unzip -d unzip unzip.zip_26c0cb5b40e9f78641ae44229cda45529418183f
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Archive:  unzip.zip_26c0cb5b40e9f78641ae44229cda45529418183f
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;extracting: unzip/flag.zip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;inflating: unzip/makefile.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;unzipするとflag.zipとmakefile.shが出てくる
flag.zipは暗号化されたZIPファイル&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ls -la
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.rw-r--r--@ &lt;span style=&#34;color:#ae81ff&#34;&gt;225&lt;/span&gt; socketo &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;  0:10 flag.zip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.rwx---r-x@  &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; socketo &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;  0:10 makefile.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;makefile.shの中身を見ると，zipパスワードに&lt;code&gt;perl -e &amp;quot;print time()&amp;quot;&lt;/code&gt;で出力されたunixtimeが設定されていることがわかる&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SECCON{&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;cat key&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt; &amp;gt; flag.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;zip -e --password&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;perl -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;print time()&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; flag.zip flag.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このzipファイルが作成された時の時間を調べる為にexiftoolで調べる&lt;/p&gt;</description>
    </item>
    <item>
      <title>CTF for ビギナーズ2015 博多（Attack &amp; Defense）に参加した話</title>
      <link>https://socketo.github.io/posts/2015/06/13/03/</link>
      <pubDate>Sat, 13 Jun 2015 20:34:08 +0000</pubDate>
      <guid>https://socketo.github.io/posts/2015/06/13/03/</guid>
      <description>&lt;p&gt;※ 移行前の元ブログ記事 : &lt;a href=&#34;https://socketo.hatenablog.jp/entry/2015/06/13/203408_1&#34;&gt;CTF for ビギナーズ2015 博多（Attack &amp;amp; Defense）に参加した話 - #include &amp;lt;sys_socket.h&amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2015-06-07，富士通株式会社 九州支社で開催されたCTF for ビギナーズ2015 博多（Attack &amp;amp; Defense）に参加してきました．&lt;/p&gt;
&lt;p&gt;CTF for ビギナーズ2015 博多（Attack &amp;amp; Defense）: &lt;a href=&#34;https://attack-and-defense.doorkeeper.jp/events/24249&#34;&gt;https://attack-and-defense.doorkeeper.jp/events/24249&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今回のこのイベントで初めて福岡に行きました．博多の明太子や博多ラーメン，もつ鍋がとても美味しかったのでサイコーという感じ．&lt;/p&gt;
&lt;h1 id=&#34;競技&#34;&gt;競技&lt;/h1&gt;
&lt;p&gt;今回のCTFは名前の通り，Attack＆Defenseということで私が今までやってきたjeopardy型ではなく，本当にサーバーを介しての攻防戦だった．&lt;br&gt;
各チーム与えられたサーバ上で稼働しているシステムを保守しながら，相手チームに攻撃するとのこと．&lt;br&gt;
与えられるサーバの環境は全チーム同じ環境で，まずは自分の持っているサーバの脆弱性を探りその脆弱性を直しながら，他のチームが修正する前にそこを叩く．という感じでした．&lt;/p&gt;
&lt;p&gt;競技のルールとしては，AttackポイントとDefenseポイントの合計で決定する．&lt;br&gt;
Defenseポイントは，与えられたサーバへの定期的なヘルスチェックのスキャンでサーバ上で稼働しているシステムが稼働しているかのSLAに応じた得点．&lt;br&gt;
Attackポイントは，今回与えられたサービスがネットショッピングのwebサイトだったため，敵のサーバで稼働しているサービスであるネットショッピングの顧客データの擬似個人情報ををスコアサーバに送信すると得点が得られる．&lt;br&gt;
みたいな感じだった．&lt;/p&gt;
&lt;p&gt;はじめ2時間ほどは大抵のチームがSLAを保ちDefenseポイントが入り続けて順位は横ばい状態だった．後半になると，あるチームが攻撃に成功し，徐々に他のチームも得点していった．&lt;br&gt;
ちなみに今回私は&lt;a href=&#34;https://twitter.com/Ranats_rifle&#34;&gt;@Ranats_rifle&lt;/a&gt;とIchigoMilkなる可愛らしいチーム名で参加した．&lt;br&gt;
（競技終了後にTAKESAKOさんに「女の子が来るかと思ったこのチーム名」と言われた）&lt;/p&gt;
&lt;h1 id=&#34;結果&#34;&gt;結果&lt;/h1&gt;
&lt;p&gt;結果としては結論から言うと9位だった．&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CTF for ビギナーズ2015 博多(Attack &amp;amp; Defense) 終了しました。参加された方はお疲れ様でした。今回の優勝はPh//shh/binです。 &lt;a href=&#34;https://twitter.com/hashtag/seccon?src=hash&#34;&gt;#seccon&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/ctf4b?src=hash&#34;&gt;#ctf4b&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/a_and_d?src=hash&#34;&gt;#a_and_d&lt;/a&gt; &lt;a href=&#34;http://t.co/JFiED8niDe&#34;&gt;pic.twitter.com/JFiED8niDe&lt;/a&gt;
— SECCON CTF (@secconctf) &lt;a href=&#34;https://twitter.com/secconctf/status/607480338319695874&#34;&gt;2015, 6月 7&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;一回攻め込まれてそのままズルズルとやってたら終了してた．&lt;br&gt;
@Ranats_rifleに攻撃の方を任せっぱなしで自分はサーバの状態を眺めていたりしたけど，なんともAttackポイントを得られなかった．&lt;br&gt;
つらい．@Ranats_rifleの攻撃がわりといいところまで行っていたそうで，完全にまたもや自分は眺めていただけで終了した．つらい．&lt;/p&gt;
&lt;p&gt;攻防戦が初めてだとはいえ，ここまで手足が出せない状態なのは非常にキツかったが，あまりできない体験はできた．&lt;br&gt;
攻防戦型の大会は次にSECCONの九州大会で開催するそうなのでそれまでにマッチョになってリベンジしたいと思う．&lt;/p&gt;
&lt;h1 id=&#34;おまけ&#34;&gt;おまけ&lt;/h1&gt;
&lt;p&gt;本場の博多ラーメン美味しかった．（一緒に行った&lt;a href=&#34;https://twitter.com/Ranats_rifle&#34;&gt;@Ranats_rifle&lt;/a&gt;が替え玉合わせて4玉食べててすごかった&lt;/p&gt;</description>
    </item>
    <item>
      <title>TDU CTF 2014 Satellite in ConoHaに参加した話</title>
      <link>https://socketo.github.io/posts/2015/03/31/</link>
      <pubDate>Tue, 31 Mar 2015 00:26:42 +0000</pubDate>
      <guid>https://socketo.github.io/posts/2015/03/31/</guid>
      <description>&lt;p&gt;※ 移行前の元ブログ記事 : &lt;a href=&#34;https://socketo.hatenablog.jp/entry/2015/03/31/002642_1&#34;&gt;TDU CTF 2014 Satellite in ConoHaに参加した話 - #include &amp;lt;sys_socket.h&amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2015-03-29、TDU CTFに参加してきました。&lt;/p&gt;
&lt;p&gt;TDU CTF 2014 Satellite in ConoHa (2015/03/29 12:00〜) : &lt;a href=&#34;http://connpass.com/event/11986/&#34;&gt;http://connpass.com/event/11986/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CTF for Beginnersでの簡易CTF以外ではCTF初参加なのでビクビクしながら行きました。&lt;/p&gt;
&lt;p&gt;本当の初心者だった自分は結局620pt取れました。&lt;/p&gt;
&lt;p&gt;懇親会でどのようにして問題を解いたかなどを参加者の方々と話していくなかで、自分が手も足も出なかった問題に対してのアプローチの仕方などを知ることがとても楽しいものでした。&lt;/p&gt;
&lt;p&gt;自分が解けた問題は少ないですがWriteupとか感想を。&lt;/p&gt;
&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Easy SQLi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;とりあえず&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OR&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;をしてみたけどダメで色々と試してたらダブルコーテーションなら何か反応があり、&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OR&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;を突っ込んだらフラグが出た。複数フラグがあったようでしたがそれ以上進むことが出来ずに断念。&lt;/p&gt;
&lt;h2 id=&#34;binary&#34;&gt;binary&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;string_compare&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;実行ファイルstring_compare.exeをとりあえずstringsしたらMinamiKotoriとかTDU{%s_is_very_cutie}といったフラグのフォーマットっぽいのが出てきたけど、IDAに食わせた。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;f:id:sockets:20150330193248p:plain&#34; loading=&#34;lazy&#34; src=&#34;https://socketo.github.io/posts/2015/03/31/20150330193248.png&#34; title=&#34;f:id:sockets:20150330193248p:plain&#34;&gt;&lt;/p&gt;
&lt;p&gt;多分TDU{%s_is_very_cutie}の%s部分にMinamiKotoriを入れれば良さそうな感じだったのでTDU{MinamiKotori_is_very_cutie}をsubmit&lt;/p&gt;
&lt;p&gt;競技終了後に中身をちゃんと見てみたら、入力をとって「MinamiKotori」だったらFlagを出して、それ以外だったら「INVALID KEY」が返されるとのこと。&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;とりあえず私はラブライブ！では穂乃果ちゃんが好きなのでKosakaHonokaと入力するだけしておく。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;KosakaHonokaではINVALID KEY&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;f:id:sockets:20150330193908p:plain&#34; loading=&#34;lazy&#34; src=&#34;https://socketo.github.io/posts/2015/03/31/20150330193908.png&#34; title=&#34;f:id:sockets:20150330193908p:plain&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Trip Picture&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;20150223_Kyoto.jpg（ことりちゃん率の高いラバスト画像）が与えられたのでとりあえずstringsコマンドしたらFlagっぽいのが出たのでsubmitした&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;読めない文字1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;文末に&amp;quot;==&amp;ldquo;がつく文字列が与えられていたので、とりあえずBase64でデコード。そしたらまた文末に&amp;rdquo;==&amp;ldquo;がついた文字列が出てきたのでもう一回デコードしたらFlagが出た。&lt;/p&gt;
&lt;h2 id=&#34;network&#34;&gt;network&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;柚子胡椒 Vol.1&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
